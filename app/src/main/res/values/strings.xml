<resources xmlns:tools="http://schemas.android.com/tools">
    <string name="app_name">Projet</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="nav_header_title">LP-DAM</string>
    <string name="nav_header_subtitle">android.studio@android.com</string>
    <string name="nav_header_desc">Projet Andoid MNM-DAMDAM</string>
    <string name="action_settings">Settings</string>

    <!-- Text Cours 1 -->
    <string name="cours_1_title">ABC d’Android</string>
    <string name="cours_1_hisoire_title">Histoire de Kotlin</string>
    <string name="cours_1_hisoire_text" tools:ignore="StringEscaping">
        C’est en 2010 que l’idée de Kotlin naît dans la tête des ingénieurs de l’entreprise JetBrains.
        Ces derniers, voyant les limitations de conception que le langage Java causait sur le développement de leurs
        différents produits,
        se sont mis à chercher un langage alternatif viable et pérenne, avec cependant une obligation : il devra être
        100 % compatible avec le code Java existant.
    </string>
    <string name="cours_1_typage_title">Un langage statiquement typé</string>
    <string name="cours_1_typage_text">
        En fait, "statiquement typé" veut dire que le type (Integer, String, Boolean, etc.)
        de chaque variable d’un programme est connu au moment de la compilation.
        C’est notamment ce processus qui permet à votre IDE de vous faire part de son mécontentement via une belle
        erreur rouge,
        quand vous tentez d’additionner un nombre avec une chaîne de caractères, par exemple…\n
        Pour résumer, un langage "statiquement typé" comme Kotlin (ou Java) présente plusieurs avantages majeurs, comme
        :\n
        &#8226; Performance : Comme les types sont connus au moment de la compilation, pas besoin de les "déduire" au
        moment de l’exécution du programme.\n
        &#8226; Fiabilité : Le compilateur vous indique beaucoup plus d’erreurs au moment de la compilation, minimisant
        les chances que votre application crashe durant son exécution.\n
        &#8226; Efficacité : Un langage statiquement typé permet de réaliser beaucoup plus facilement des "refactoring"
        et permet également la mise en place d’outils performants au sein de l’IDE comme "l’autocomplétion".
    </string>
    <string name="cours_1_resume_title">En résumé :</string>
    <string name="cours_1_resume_text">
        &#8226; Kotlin a été développé par Jetbrains dans l’objectif de pallier les limitations qu’imposait Java dans le
        développement de leurs différents produits.\n

        &#8226; Kotlin est un langage de programmation qui se veut "concis", "sûr", "pragmatique" et "100% interopérable
        avec Java".\n

        &#8226; Kotlin est un langage de programmation "statiquement typé" supportant néanmoins "l’inférence de type"
        grâce à son compilateur.\n

        &#8226; Kotlin supporte la "programmation orientée objet" et la "programmation fonctionnelle".\n

        &#8226; Kotlin est open source, supporte la plupart des IDEs et fonctionne sur la majorité des plateformes Java
        actuelles (où le bytecode JVM est accepté).\n
    </string>

    <!-- Text Cours 2 -->
    <string name="cours_2_title">Utiliser la bibliothèque Anko</string>
    <string name="cours_2_importer_title">Importer la bibliothèque Anko Commons</string>
    <string name="cours_2_importer_text">
        1. Placez vous dans le fichier gradle du projet build.gradle (Project: MyProject)\n
        2. Ajoutez une variable contenant la version d’Anko Commons à utiliser:\n
        \t &#8226; ext.anko_version = \'0.10.5\'\n
        3. Placez vous dans le fichier gradle du module build.gradle (Module: app)\n
        4.Ajoutez la dépendance Anko Commons dans le bloc approprié dependencies :\n
        \t &#8226; dependencies {\n
        \t\t implementation "org.jetbrains.anko:anko-common:$anko_version"\n
        \t }\n
    </string>
    <string name="cours_2_afficher_title">Afficher un message rapide</string>
    <string name="cours_2_afficher_text">
        Afin de présenter des messages d’information rapide à l’utilisateur, le SDK Android fournit la classe Toast (cf.
        documentation officiel). Elle permet de créer un message avec makeText(), cette dernière prend 3 paramètres :\n
        \t &#8226; le contexte de l’application (this depuis une Activity, activity depuis un Fragment)\n
        \t &#8226; le message\n
        \t &#8226; la durée d’affichage long ou court\n
        Enfin, il s’agit d’afficher le message ainsi créé via la fonction show() (l’appel indispensable à ne pas oublier
        lorsqu’on code à la plage ;).\n
        La bibliothèque Anko Commons simplifie cette tâche grâce à la fonction toast(), dont l’import correspond à
        import org.jetbrains.anko.toast.
        Elle peut être appelée de manière indifférente depuis une Activity ou un Fragment, avec un seul paramètre (le
        texte à afficher).\n
        Appelez la fonction toast() :
        \t &#8226; toast(R.string.text_island)
    </string>
    <string name="cours_2_dialogue_title">Ouvrir une boite de dialogue</string>
    <string name="cours_2_dialogue_text">
        Appelez la fonction alert(), dont l’import correspond à import org.jetbrains.anko.alert, cela dans son plus
        simple appareil :\n
        \t &#8226; alert("YO").show()
    </string>
    <string name="cours_2_email_title">Proposer d’envoyer un email</string>
    <string name="cours_2_email_text">
        Afin de proposer d’envoyer un email, à l’utilisateur, avec une application native, le SDK Android fournit la
        classe Intent avec un paramétrage spécifique.\n
        La bibliothèque Anko Commons propose la fonction email(), dont l’import correspond à import
        org.jetbrains.anko.email.\n
        Appelez la fonction email() :\n
        \t &#8226; email("hello@chillcoding.com", getString(R.string.subject_feedback), "")
    </string>
    <string name="cours_2_exp_title">Retour d’expérience</string>
    <string name="cours_2_exp_text">
        Finalement, la bibliothèque Anko Commons offre des fonctions d’extensions et autres implémentations Kotlin
        intéressantes. En particulier, elle permet de programmer très rapidement les tâches utilisateurs les plus
        courantes :\n
        \t &#8226; Voir un message rapide\n
        \t &#8226; Interagir avec une boîte de dialogue\n
        \t &#8226; Ouvrir un autre écran\n
        \t &#8226; Voir une page Internet\n
        \t &#8226; Envoyer un email\n
        \t &#8226; Partager du contenu\n
        Cela dit, il est important de savoir ce qu’il y a sous le capot (Cmd ou Ctrl + clique :) afin de connaître
        l’implémentation effectuée à partir du SDK Android. Parfois, il est nécessaire de mettre les mains dans le
        cambouis afin de développer une fonctionnalité plus évoluée, voir plus complexe. La connaissance du SDK Android
        est alors bienvenue.\n
        Aussi, l’utilisation des fonctions Anko Commons peuvent être restreintes à un contexte spécifique, c’est-à-dire
        qu’elles peuvent être appelées depuis une Activity ou bien depuis un Fragment. Leur intégration dans une
        architecture spécifiquement alambiqué n’est alors pas forcément adéquate.\n
    </string>

    <!-- Text Cours 3 -->
    <string name="cours_3_title">Outils du Développeur / Débugage</string>
    <string name="cours_3_message_title">Message système et Débogage</string>
    <string name="cours_3_message_text">
        1. Console Logcat\n
        2. Débogage du fichier R\n
        3. Débogage pas à pas\n
        4. Android Lint\n
    </string>
    <string name="cours_3_test_title">Tests</string>
    <string name="cours_3_test_text">
        \t &#8226; Point d’arrêt\n
        \t &#8226; État variable\n
        \t &#8226; Build > Clean\n
        \t &#8226; Run\n
        \t &#8226; Erreur dans fenêtre de message\n
        \t &#8226; Cherchez la ressource anormal\n
        \t &#8226; Cherchez l’attribut XML erroné\n
    </string>
    <string name="cours_3_deploiement_title">Déploiement</string>
    <string name="cours_3_deploiement_text">
        \t &#8226; Ressources non utilisées\n
        \t &#8226; Ressources non internationalisées\n
        \t &#8226; Utilisation d’API non supportées\n
        \t &#8226; etc
    </string>

    <!-- Text Cours 4 -->
    <string name="cours_4_title">Interface Utilisateur Native</string>
    <string name="cours_4_vue_title">Vue</string>
    <string name="cours_4_vue_text" tools:ignore="StringEscaping">
        1. View, Activity, Fragment:\n
        \n
        View: \n
        &#8226; View -> classe ancêtre de tous les composants graphiques \n
        &#8226; Gestion de l\'affichage et des événements d\'une zone sur l\'écran \n
        &#8226; ViewGroup : peut contenir des vues enfants (arbre de vues) \n
        &#8226; Arbre de vues statique définissable en XML dans une ressource layout \n
        &#8226;Package android.widget : vues et groupes de vues prédéfinis pour des usages courants \n
        \n
        Activity:\n
        &#8226; Une activité (sous classe d’Activity) représente un unique écran de
        l’UI d’une application Android\n
        &#8226; Une application contient en général plusieurs activités. Par exemple,
        une application de courriel : une activité pour la composition, une
        activité pour la lecture, indépendante l’une de l’autre.\n
        &#8226; Ces activités peuvent être lancées par d’autres applications. Par
        exemple pour partager une image (gallery app) via un courriel(mailer app)\n
        &#8226; Tout l’intérêt d’Android est de faciliter l’utilisation de l’ensemble des
        composants présents dans le système, et donc notamment ndes
        différentes activités fournies par les applications.\n
        \n
        Fragment:\n
        Les fragments permettent de scinder vos activités en composants encapsulés et réutilisables qui possèdent leur
        propre cycle de vie et leur propre interface graphique.
        Cela permet de mettre en place des I.H.M. évoluées qui s\'adaptent aux différents écrans et à leur
        orientation.\n
        Quelques notions élémentaires concernant les fragments :\n
        &#8226;Ils déportent une partie du traitement de l\'activité en leur sein ;\n
        &#8226;Ils sont liés à une activité (ils n\'existent pas sans elle) ;\n
        &#8226;Ils définissent la plupart du temps une interface graphique, mais peuvent aussi être utilisés pour
        retenir un
        état lors de la destruction/reconstruction de leur activité parente (le bon vieux
        onRetainNonConfigurationInstance) ;\n
        &#8226;Ils peuvent être statiques (définis une fois pour toutes dans le fichier de layout) ou dynamiques (créés,
        supprimés, ajoutés dynamiquement) ;\n
        &#8226;Ils sont apparus à partir de HoneyComb (level 11) ainsi, pour les mettre en place avant HoneyComb, il
        faut utiliser la support-librairy ;\n
        &#8226;Pour les utiliser, il faut un BuildSDK et un TragetSDK supérieur à 11 (cela tombe bien, vous devriez être
        à 19 à l\'heure où j\'écris ces lignes).\n
        Les classes fondamentales pour la gestion des fragments sont : Fragment, FragmentManager et
        FragmentTransaction.\n
    </string>
    <string name="cours_4_resource_title">Ressource</string>
    <string name="cours_4_resource_text" tools:ignore="StringEscaping">
        Les ressources:\n
        &#8226;Ressource : élément statique réutilisable\n
        &#8226;Ressources définies dans des fichiers XML (ou binaires) dans res/ (noms de fichiers [a-z0-9_]+) :\n
        \t&#8226; res/values : déclaration XML (avec i18n) de string, color, dimen, style &#8230;\n
        \t&#8226;res/drawable : fichiers multimédias binaires (images, sons)\n
        \t&#8226;res/layout : définition XML d\'agencements de vues graphiques (sous forme d\'arbre)\n
        \t&#8226;res/anim : fichiers XML de définition d\'animations\n
        \t\t&#8226;Animation d\'interpolation (changement de transparence, échelle, angle de rotation &#8230;)\n
        \t\t&#8226;Animation pour séquences d\'images : liste des images avec leur durée d\'affichage\n
        \t&#8226;res/xml : pour des fichiers XML divers\n
        \t&#8226;res/raw : pour d\'autres ressources sous la forme de fichiers binaires\n
    </string>
    <string name="cours_4_graphique_title">Élément Graphique Natif</string>
    <string name="cours_4_graphique_text" tools:ignore="StringEscaping">
        Éléments de Graphique:\n
        &#8226; TextView : affiche une chaîne\n
        &#8226; EditText : permet la saisie d\'une chaîne (propriété inputType pour le type d\'entrée attendu)\n
        &#8226; Button : bouton cliquable, variante de type interrupteur avec ToggleButton\n
        &#8226; CheckBox : case à cocher\n
        &#8226; RadioButton : bouton radio regroupable dans un RadioGroup\n
        &#8226; CheckedTextView : chaîne cochable (implante Checkable)\n
        &#8226; ProgressBar : barre de progression (horizontale, circulaire), variante avec étoiles de notation avec
        RatingBar\n
        &#8226; SeekBar : barre de réglage\n
        &#8226; SearchView : champ de recherche avec proposition de suggestions\n
        &#8226; ImageView : affichage d\'une ressource image\n
        &#8226; ImageButton : bouton avec image\n
        &#8226; VideoView : affichage contrôlable de vidéo\n
    </string>
    <string name="cours_4_navigation_title">Élément de Navigation</string>
    <string name="cours_4_navigation_text" tools:ignore="StringEscaping">
        Types de menu :\n
        &#8226; Menu d\'options : obtenu depuis un bouton physique ou la barre d\'action ; y résident les actions
        principales de l\'application (navigation, paramétrage, recherche&#8230;)\n
        &#8226; Menu contextuel ou popup : obtenu depuis un clic long sur un élément de vue pour proposer des choix
        spécifiques\n
        &#8226; Événement de sélection d\'item de menu : onMenuItemClick(MenuItem item) ou
        Activity.onOptionsItemSelected(MenuItem item) ; il faut tester l\'item sélectionné avec un switch (en utilisant
        par exemple item.getItemId())\n
        ActionBar :\n
        &#8226; Barre d\'action en haut d\'écran apparue depuis Android 3.0 (API11), récupérable avec
        Activity.getActionBar()\n
        &#8226; Permet la navigation dans une application, son paramétrage ainsi que de lancer des actions\n
        &#8226; Barre peuplable en redéfinissant Activity.onCreateOptionsMenu(Menu menu)\n
        &#8226; Généralement on charge un menu défini par une ressource XML (utilisation de MenuInflater)\n
        Éléments de navigation\n
        &#8226; Retour top (logo haut gauche)\n
        \t&#8226; remplaçable par une icône haut avec actionBar.setDisplayHomeAsUpEnabled(true)\n
        \t&#8226; Clic récupérable avec onOptionsItemSelected() avec l\'ID android.R.id.home\n
        \t&#8226; Utile pour revenir à l\'activité principale :\n
        \t&#8226; Intent intent = new Intent(this, HomeActivity.class); intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        startActivity(intent);\n
        &#8226; Onglets\n
        \t&#8226; Instantiation d\'un ActionBar.Tab, setText…, setIcon…\n
        \t&#8226; Création d\'un TabListener (code exécuté lors du choix du tab, typiquement chargement de Fragment) et
        enregistrement avec Tab.setTabListener()\n
        \t&#8226; Ajout dans la Bar avec Bar.addTab(Tab tab)\n
        Items d\'action\n
        &#8226;Vue pour un item\n
        \t&#8226; Classiquement : icône + texte\n
        \t&#8226; Choix d\'une vue personnalisée avec android:actionViewClass\n
        &#8226;Affichage dans l\'ActionBar configurable avec android:showAsAction (ifRoom, withText, never,
        collapseActionView)\n
        &#8226;Certaines vues (comme SearchView) proposent deux versions (réduites et étendue) avec
        CollapsibleActionView\n
        &#8226;ActionProvider : définition d\'item avec action prédéfinie (e.g. ShareActionProvider pour partager un
        élément de différentes façons); propriété android:actionProviderClass\n
    </string>
    <string name="cours_4_design_title">Material Design</string>
    <string name="cours_4_design_text" tools:ignore="StringEscaping">
        Le Material Design est un ensemble de règles de design proposées par Google et qui s\'appliquent à l\'interface
        graphique des logiciels et applications.\n
        Il est utilisé notamment à partir de la version 5.0 du système d\'exploitation Android.\n
        Google a présenté le Material Design pour la première fois lors de la conférence Google I\/O, le 25 juin 20143.
        En misant sur les motifs \« carte \», déjà utilisés dans Google Now, ces règles de design mettent l\'accent sur
        une utilisation accrue des mises en page
        basées sur une grille, des animations et des transitions, des effets de profondeur tels l\'éclairage et les
        ombres. Selon Google ce nouveau langage de design est basé sur le papier et l\'encre.\n
        Le designer Matías Duarte explique que contrairement au vrai papier, notre matériau numérique peut s\'étirer et
        se modifier de manière intelligente.
        Le matériau contextuel a une surface physique et des bords. Les superpositions et les ombres donnent des
        informations sur ce que vous pouvez toucher.\n
        Ce design d\'interface utilisateur succède au design Holo utilisé par Android de la version 4.0 à la version
        4.4.\n
    </string>

    <!-- Text Cours 5 -->
    <string name="cours_5_title">Les vues avancées</string>
    <string name="cours_5_web_title">WebView</string>
    <string name="cours_5_web_text" tools:ignore="StringEscaping">
        &#8226; Vue d\'affichage de contenu HTML avec la bibliothèque de rendu WebKit\n
        &#8226;Permet d\'embarquer un véritable navigateur web dans une application ; bridage possible depuis
        WebView.getSettings() :\n
        \t &#8226;setJavaScriptEnabled(false) pour désactiver JavaScript\n
        \t &#8226;setPluginState(PluginState.OFF) pour désactiver les plugins\n
        \t &#8226;setAllowContentAccess(false) pour désactiver le chargement d\'URL\n
        \t &#8226;setAllowFileAccess(false) pour désactiver le chargement de fichiers locaux\n
        &#8226; Utilisation :\n
        \t &#8226;loadData(String data, String mimeType, String encoding) : affiche un contenu directement spécifié\n
        \t &#8226;loadUrl(String url) : charge le contenu à l\'URL spécifiée\n
        &#8226;Utile pour créer une application Android/HTML5/JavaScript hybride : communication d\'un objet Java à un
        script JavaScript avec addJavaScriptInterface(Object object, String name)\n
        &#8226;Interception des clics sur liens hypertextes en créant une classe dérivée redéfinissant
        shouldOverrideUrlLoading()\n
    </string>
    <string name="cours_5_widget_title">Widgets composés à usage spécifique</string>
    <string name="cours_5_widget_text" tools:ignore="StringEscaping">
        Pour formulaire : facilite l\'entrée de données communes dans des formulaires et permet la validation\n
        &#8226;TimePicker, DatePicker : choix d\'horaire et de date\n
        &#8226;CalendarView: affiche un calendrier avec date sélectionnable\n
        &#8226;NumberPicker : sélection d\'un entier dans un intervalle avec incrémentation et décrémentation\n
        &#8226;DialerFilter : permet de saisir des chiffres/lettres avec un clavier numérique de téléphone\n
        &#8226;Pour activité multimédia :\n
        \t&#8226;MediaController : offre des boutons de contrôle pour une vidéo (avec VideoView par exemple)\n
        \t&#8226;ZoomControls : bouton de zoom/dezoom\n
    </string>
    <string name="cours_5_widget2_title">Widgets inter-applicatifs</string>
    <string name="cours_5_widget2_text" tools:ignore="StringEscaping">
        Widget : composant graphique d\'une application embarquable dans une autre application\n
        &#8226;À ne pas confondre avec les widgets précédents !\n
        &#8226;Utilisation typique par intégration sur l\'écran d\'accueil\n
        &#8226;Principaux types de widgets :\n
        \t&#8226; Widgets d\'information affichant certaines données de l\'application (par exemple prévisions météo,
        trafic routier&#8230;)\n
        \t&#8226;Widgets de contrôle permettant d\'agir sur l\'application sans ouvrir de nouvelle activité (lancer des
        actions, changer un état&#8230;)\n
        \t&#8226; Widget de parcours de collections permettant d\'itérer sur des éléments (visualisation de gallerie
        photo par exemple)\n
    </string>

    <!-- Text Cours 6 -->
    <string name="cours_6_title">Les vues basées sur des adaptateurs</string>
    <string name="cours_6_principe_title">Principe</string>
    <string name="cours_6_principe_text" tools:ignore="StringEscaping">
        Classes dérivées de AdapterView\n
        &#8226;Adapter est un modèle permettant d\'obtenir les vues enfants à afficher\n
        \t&#8226;getView(int i, View convertView, ViewGroup parent) permet d\'obtenir la vue à afficher pour l\'enfant
        #i (implantations par défaut utilisant un TextView)\n
        &#8226;Adapteurs pré-définis :\n
        \t&#8226;ArrayAdapter : stockage d\'une liste d\'éléments\n
        \t&#8226;SimpleCursorAdapter : modèle adaptant les données d\'un Cursor de BDD\n
    </string>
    <string name="cours_6_view_title">ListView et GridView (AbsListView)</string>
    <string name="cours_6_view_text" tools:ignore="StringEscaping">
        &#8226;ListView : affichage d\'une liste avec défilement vertical puisant ses éléments dans un ListAdapter
        (classe dérivée avec liste à deux niveaux : ExpandableListView)\n
        &#8226;GridView : affichage sur une grille avec défilement vertical\n
        &#8226;Attributs intéressants : columnWidth, gravity (alignement de l\'enfant dans la cellule), numColumns,
        stretchMode\n
        &#8226;Possibilité d\'agir sur les évènements de défilement : setOnScrollListener(ScrollListener l)\n
    </string>
    <string name="cours_6_grid_title">GridView des versions d\'Android</string>
    <string name="cours_6_grid_text" tools:ignore="StringEscaping">
        &#8226;Objectif : afficher en grille les différentes versions d\'Android\n
        &#8226;Récupération des versions d\'Android par introspection sur Build.VERSION_CODES (consultation des champs
        statiques)\n
        &#8226;Affichage de chaque version en utilisant un layout personnalisé :\n
        \t&#8226;Création du layout dans un fichier XML (LinearLayout avec deux TextView)\n
        \t&#8226;Chargement du layout XML avec le LayoutInflater en redéfinissant la méthode getView() de l\'adapter
        placé sur la GridView\n
        \t&#8226;Appels de setText pour définir le nom de la version et le numéro d\'API\n
        \t&#8226;Choix d\'une couleur aléatoire pour le fond du LinearLayout (lorsque la cellule est rafraîchie la
        couleur peut changer !)\n
    </string>
    <string name="cours_6_spinner_title">Spinner</string>
    <string name="cours_6_spinner_text" tools:ignore="StringEscaping">
        &#8226; Champ de texte avec menu déroulant pour choix d\'un item unique\n
        &#8226; Éléments de choix fournis par un SpinnerAdapter (interface implantée par ArrayAdapter)\n
        &#8226; Réaction à l\'élément choisi avec un onItemSelectedListener\n
    </string>
    <string name="cours_6_viewpager_title">ViewPager</string>
    <string name="cours_6_viewpager_text" tools:ignore="StringEscaping">
        &#8226; Maintient une liste de vues parcourable par un geste de swipe\n
        &#8226; Les vues à afficher sont fournies par un PagerAdapter (ViewPager.setAdapter()) qui est responsable de
        l\'ajout et de la suppression d\'éléments dans le ViewPager :\n
        \t&#8226;Object instantiateItem(ViewGroup parent, int position) : méthode appelée lorsque la vue doit être
        installée dans le ViewGroup parent (doit faire l\'installation) ; retourne un objet qui est une clé représentant
        l\'item\n
        \t&#8226;void destroyItem(ViewGroup parent, int pos, Object o) : méthode appelée pour la destruction d\'un item
        (désinstalle du ViewGroup)\n
        \t&#8226; int getCount() : retourne le nombre d\'items dans l\'adapter\n
        \t&#8226; boolean isViewFromObject(View view, Object o) : permet d\'indiquer si la vue et l\'objet passés en
        paramètre sont liés (l\'objet représentant une clé pour la vue)\n
        &#8226;Version spécifique de PagerAdapter utilisant des fragments : FragmentPagerAdapter\n
        \t&#8226;Fragment getItem(int pos) : méthode abstraite à redéfinir\n
    </string>
</resources>
